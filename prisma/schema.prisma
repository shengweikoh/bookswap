generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  name             String
  email            String   @unique
  password         String
  avatar           String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  interestedGenres String[]
  birthday         String?
  location         String?
  
  // Relations
  books            Book[]
  exchangeRequestsMade     ExchangeRequest[] @relation("RequesterExchanges")
  exchangeRequestsReceived ExchangeRequest[] @relation("OwnerExchanges")
  notifications    Notification[]
}

model Book {
  id          String        @id @default(uuid())
  title       String
  author      String
  genre       String
  condition   BookCondition
  description String
  ownerId     String
  image       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isAvailable Boolean       @default(true)
  
  // Relations
  owner            User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  exchangeRequests ExchangeRequest[]
}

model ExchangeRequest {
  id          String            @id @default(uuid())
  bookId      String
  requesterId String
  ownerId     String
  message     String
  status      ExchangeStatus    @default(pending)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relations
  book      Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  requester User @relation("RequesterExchanges", fields: [requesterId], references: [id], onDelete: Cascade)
  owner     User @relation("OwnerExchanges", fields: [ownerId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  relatedId String?
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum BookCondition {
  New
  Good
  Worn
}

enum ExchangeStatus {
  pending
  accepted
  rejected
}

enum NotificationType {
  exchange
  accepted
  rejected
  completed
  profile
  follow
  listing
  welcome
}